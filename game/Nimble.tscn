[gd_scene load_steps=8 format=2]

[ext_resource path="res://Nimble.gd" type="Script" id=1]
[ext_resource path="res://sprites/nimble/core.res" type="SpriteFrames" id=2]
[ext_resource path="res://sprites/nimble/cloud.res" type="SpriteFrames" id=3]
[ext_resource path="res://audio/goal_drone_loop.ogg" type="AudioStream" id=5]

[sub_resource type="Shader" id=2]
code = "shader_type particles;

uniform vec2 nimble_pos = vec2(0.0, 0.0);
uniform vec2 tank_pos = vec2(120.0, 120.0);
uniform vec4 nimble_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 tank_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);

uniform float nimble_radius = 6.0;
uniform float tank_radius = 20.0;
uniform float min_radius = 1.0;

const float PI = 3.14;
const float PI2 = 2.0 * PI;
const float PI1_2 = 0.5 * PI;


float rnd_fl(float f) {
	return fract(sin(f*0.5453123)*sin(f/0.23123)/sin(f*0.83123));
}

float rnd(int index, float time, float qa, float qb) {
	return rnd_fl(float(index) * fract(sin(time + qa) + qb));
}


void vertex() {	
//	float s = atan((rnd(INDEX, TIME, 0.325234, -45.23) - 0.5) * 1000.0) / PI + 0.5;
	float s = rnd(INDEX, TIME, 0.325234, -45.23);
	float sn = smoothstep(0.0, 0.4, s);
	float st = smoothstep(0.6, 1.0, s);
	
	float s2 = atan((rnd(INDEX, TIME, 0.325234, -45.23) - 0.5) * 30.0) / PI + 0.5;
	vec2 p = mix(nimble_pos, tank_pos, s2);
	float r = max(mix(nimble_radius, min_radius, sn), mix(min_radius, tank_radius, st));

	float rr = rnd(INDEX, TIME, 3.213, 1.3) * r;
	float phi = rnd(INDEX, TIME, 1.53334, 2.5) * PI2;
	
	vec2 n = vec2(p.x + sin(phi) * rr, p.y + cos(phi) * rr);
	
	TRANSFORM[3][0] = n.x;
	TRANSFORM[3][1] = n.y;
	
	COLOR = mix(nimble_color, tank_color, s2);
}

//void vertex() {
//	float r = rnd(INDEX, TIME, 3.213, 1.3) * nimble_radius;
//	float phi = rnd(INDEX, TIME, 1.53334, 2.5) * PI2;
//
//	vec2 n = vec2(nimble_pos.x + sin(phi) * r, nimble_pos.y + cos(phi) * r);
//
//	float tr = rnd(INDEX, TIME, 1.44, 4.1) * tank_radius;
//	float tphi = rnd(INDEX, TIME, 5.6734, 2.8) * PI2;
//
//	vec2 t = vec2(tank_pos.x + sin(tphi) * tr, tank_pos.y + cos(tphi) * tr);
//
//	float s = rnd(INDEX, TIME, 0.325234, -45.23);
//
//	TRANSFORM[3][0] = mix(n.x, t.x, s);
//	TRANSFORM[3][1] = mix(n.y, t.y, s);
//}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/nimble_pos = Vector2( 0, 0 )
shader_param/tank_pos = Vector2( 120, 120 )
shader_param/nimble_color = Color( 1, 1, 1, 1 )
shader_param/tank_color = Color( 1, 0.14902, 0.454902, 1 )
shader_param/nimble_radius = 7.0
shader_param/tank_radius = 24.0
shader_param/min_radius = 1.0

[sub_resource type="CapsuleShape2D" id=1]
radius = 2.0
height = 10.0

[node name="Nimble" type="Node2D"]
script = ExtResource( 1 )

[node name="Particles2D" type="Particles2D" parent="."]
position = Vector2( 15, 22 )
z_index = -1
amount = 100
lifetime = 1e+09
one_shot = true
explosiveness = 1.0
randomness = 1.0
local_coords = false
process_material = SubResource( 3 )

[node name="Polygon2D" type="Polygon2D" parent="."]
visible = false
position = Vector2( 0, -2 )
rotation = 0.0272003
scale = Vector2( 0.156598, 0.156598 )
color = Color( 0.835294, 0.611765, 1, 1 )
polygon = PoolVector2Array( -3, -57, 15, -7, 12, 79, -1, 10, -10, 60, -17, -1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="AnimationCloud" type="AnimatedSprite" parent="."]
frames = ExtResource( 3 )
animation = "idle"
frame = 3
playing = true

[node name="AnimationCore" type="AnimatedSprite" parent="."]
frames = ExtResource( 2 )
animation = "idle"
frame = 1
playing = true

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
autoplay = true
bus = "Goal"

[connection signal="animation_finished" from="AnimationCloud" to="." method="_on_anim_finished"]
